<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">




	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<context:component-scan base-package="com.iTechies" />


	<!-- Simple implementation of the standard JDBC DataSource interface, configuring 
		the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://192.168.2.11/test" />
		<property name="username" value="ibc" />
		<property name="password" value="ibc" />
	</bean>


	<!-- This produces a container-managed EntityManagerFactory; rather than 
		application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
	<bean id="entityManagerFactoryBean"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.iTechies.model" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>

	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
	</bean>

	<!-- responsible for registering the necessary Spring components that power 
		annotation-driven transaction management; such as when @Transactional methods 
		are invoked -->
	<tx:annotation-driven />

	<bean id="masterDao" class="com.iTehcies.dao.Impl.MasterDaoImpl"/>		
	

	<bean id="userService" class="com.iTehcies.service.Impl.UserServiceImpl">
		<property name="masterDao" ref="masterDao" />
	</bean>

	<bean id="userController" class="com.iTechies.qbuz.controller.UserController">
		<property name="userService" ref="userService" />
	</bean>

</beans>
